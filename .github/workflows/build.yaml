name: build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      platforms:
        description: "windows, macos, linux, android or 'all' (comma-separated ok)"
        required: false
        default: "all"
      is_stable:
        description: "Treat this run as stable? (true/false)"
        required: false
        default: "true"

env:
  # Manual run: use input; tag push: stable if tag has no '-'
  IS_STABLE: ${{ github.event_name == 'workflow_dispatch'
                  && github.event.inputs.is_stable == 'true'
                  || (github.event_name != 'workflow_dispatch' && !contains(github.ref, '-')) }}

jobs:
  build:
    # Build all on tag pushes; otherwise only the selected platforms
    if: ${{ github.event_name != 'workflow_dispatch'
            || github.event.inputs.platforms == 'all'
            || contains(github.event.inputs.platforms, matrix.platform) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ startsWith(matrix.platform, 'windows') && 'bash' || 'bash' }}
    strategy:
      fail-fast: false
      # bump/remove to allow parallel runs
      max-parallel: 4
      matrix:
        include:
          - platform: windows
            os: windows-latest        # ← hosted Windows instead of self-hosted
            arch: amd64
          # - platform: windows
          #   os: windows-11-arm
          #   arch: arm64
          - platform: macos
            os: macos-13
            arch: amd64
          - platform: macos
            os: macos-latest
            arch: arm64
          - platform: android
            os: ubuntu-latest
          - platform: linux
            os: ubuntu-22.04
            arch: amd64
          # - platform: linux
          #   os: ubuntu-24.04-arm
          #   arch: arm64

    steps:
      - name: Setup rust
        if: startsWith(matrix.os, 'windows-11-arm')
        run: |
          Invoke-WebRequest -Uri "https://win.rustup.rs/aarch64" -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-toolchain stable
          $cargoPath = "$env:USERPROFILE\.cargo\bin"
          Add-Content $env:GITHUB_PATH $cargoPath

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Android Signing
        if: startsWith(matrix.platform,'android')
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/local.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/local.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/local.properties

      - name: Setup Windows Build Environment
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          TOOLS_DIR="/c/runner-tools"
          mkdir -p "$TOOLS_DIR"
          if command -v jq &> /dev/null; then
            jq --version
          else
            if choco install jq -y --no-progress; then
              export PATH="/c/ProgramData/chocolatey/bin:$PATH"
              echo "/c/ProgramData/chocolatey/bin" >> $GITHUB_PATH
            else
              JQ_PATH="$TOOLS_DIR/jq.exe"
              rm -f "$JQ_PATH"
              if curl -L "https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe" -o "$JQ_PATH" && [ -s "$JQ_PATH" ]; then
                chmod +x "$JQ_PATH"
                export PATH="$TOOLS_DIR:$PATH"
                echo "$TOOLS_DIR" >> $GITHUB_PATH
              fi
            fi
          fi
          if ! command -v cargo &> /dev/null; then
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source "$HOME/.cargo/env"
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi
          cargo --version
          INNO_SETUP_PATH="/c/Program Files (x86)/Inno Setup 6/ISCC.exe"
          if [ ! -f "$INNO_SETUP_PATH" ]; then
            choco install innosetup -y --no-progress
            echo "/c/Program Files (x86)/Inno Setup 6" >> $GITHUB_PATH
          fi

      - name: Verify Go Installation
        run: |
          echo "=== Go Environment ==="
          go version
          go env GOPATH
          go env GOCACHE
          go env GOMODCACHE

      - name: Setup Flutter Master
        if: startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm')
        uses: subosito/flutter-action@v2
        with:
          channel: 'master'
          cache: true

      - name: Setup Flutter
        if: ${{ !(startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm') || matrix.os == 'self-hosted') }}
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Use Local Flutter (Self-hosted Windows)
        if: matrix.os == 'self-hosted' && startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          echo "Using local Flutter installation"
          flutter --version
          flutter doctor

      - name: Get Flutter Dependency
        run: flutter pub get

      - name: Generate SDK Code
        run: |
          cd lib/sdk/flutter_xboard_sdk
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
          cd ../../..

      - name: Generate Main Project Code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Clean Swift Package Manager cache
        if: startsWith(matrix.platform, 'macos')
        run: |
          find macos -name "Package.resolved" -delete
          rm -rf macos/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
          rm -rf macos/Runner.xcworkspace/xcshareddata/swiftpm/

      - name: Prepare Windows Build Environment
        if: startsWith(matrix.platform, 'windows')
        shell: bash
        run: |
          PUB_CACHE_BIN="/c/Users/$(whoami)/AppData/Local/Pub/Cache/bin"
          INNO_SETUP_DIR="/c/Program Files (x86)/Inno Setup 6"
          export PATH="$PUB_CACHE_BIN:$INNO_SETUP_DIR:$PATH"
          echo "$PUB_CACHE_BIN" >> $GITHUB_PATH
          echo "$INNO_SETUP_DIR" >> $GITHUB_PATH
          if command -v flutter_distributor &> /dev/null; then
            flutter_distributor --version
          else
            dart pub global activate flutter_distributor
            export PATH="$PUB_CACHE_BIN:$PATH"
          fi
          if command -v ISCC &> /dev/null; then
            ISCC /? || true
          else
            echo "ISCC not found in PATH"
            find "/c/Program Files (x86)" -name "ISCC.exe" 2>/dev/null || true
          fi

      - name: Setup
        run: dart setup.dart ${{ matrix.platform }} ${{ matrix.arch && format('--arch {0}', matrix.arch) }} ${{ env.IS_STABLE == 'true' && '--env stable' || '' }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) }}
          path: ./dist
          overwrite: true

  changelog:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ env.IS_STABLE == 'true' }}
        with:
          fetch-depth: 0
          ref: refs/heads/main
      - name: Generate
        if: ${{ env.IS_STABLE == 'true' }}
        run: |
          tags=($(git tag --merged $(git rev-parse HEAD) --sort=-creatordate))
          preTag=$(grep -oP '^## \K.*' CHANGELOG.md | head -n 1)
          currentTag=""
          for ((i = 0; i <= ${#tags[@]}; i++)); do
            if (( i < ${#tags[@]} )); then
              tag=${tags[$i]}
            else
              tag=""
            fi
            if [ -n "$currentTag" ]; then
              if [ "$(echo -e "$currentTag\n$preTag" | sort -V | head -n 1)" == "$currentTag" ]; then
                break
              fi
            fi
            if [ -n "$currentTag" ]; then
              echo "## $currentTag" >> NEW_CHANGELOG.md
              echo "" >> NEW_CHANGELOG.md
              if [ -n "$tag" ]; then
                git log --pretty=format:"%B" "$tag..$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              else
                git log --pretty=format:"%B" "$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              fi
              echo "" >> NEW_CHANGELOG.md
            fi
            currentTag=$tag
          done
          cat CHANGELOG.md >> NEW_CHANGELOG.md
          cat NEW_CHANGELOG.md > CHANGELOG.md

      - name: Commit
        if: ${{ env.IS_STABLE == 'true' }}
        run: |
          git add CHANGELOG.md
          if ! git diff --cached --quiet; then
            git config --local user.email "chen08209@gmail.com"
            git config --local user.name "chen08209"
            git commit -m "Update changelog"
            git push || exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload:
    permissions: write-all
    needs: [ build ]
    runs-on: ubuntu-latest
    services:
      telegram-bot-api:
        image: aiogram/telegram-bot-api:latest
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        ports:
          - 8081:8081
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          pattern: artifact-*
          merge-multiple: true

      - name: Generate release.md
        run: |
          tags=($(git tag --merged $(git rev-parse HEAD) --sort=-creatordate))
          preTag=$(curl --silent "https://api.github.com/repos/chen08209/FlClash/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' || echo "")
          currentTag=""
          for ((i = 0; i <= ${#tags[@]}; i++)); do
            if (( i < ${#tags[@]} )); then
              tag=${tags[$i]}
            else
              tag=""
            fi
            if [ -n "$currentTag" ]; then
              if [ "$(echo -e "$currentTag\n$preTag" | sort -V | head -n 1)" == "$currentTag" ]; then
                break
              fi
            fi
            if [ -n "$currentTag" ]; then
              if [ -n "$tag" ]; then
                git log --pretty=format:"%B" "$tag..$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> release.md
              else
                git log --pretty=format:"%B" "$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> release.md
              fi
              echo "" >> release.md
            fi
            currentTag=$tag
          done

      - name: Generate sha256
        run: |
          cd ./dist
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done  

      - name: Release
        if: ${{ env.IS_STABLE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/*
          body_path: './release.md'
